
os — Miscellaneous operating system interfaces

class flask.Config(root_path, defaults=None)
Works exactly like a dict but provides ways to fill it from files or special dictionaries

from_mapping(*mapping, **kwargs)
Updates the config like update() ignoring items with non-upper keys

class flask.Flask(import_name, static_url_path=None, static_folder='static', static_host=None, host_matching=False, subdomain_matching=False, template_folder='templates', instance_path=None, instance_relative_config=False, root_path=None)
The flask object implements a WSGI application and acts as the central object

instance_relative_config – if set to True relative filenames for loading the config are assumed to be relative to the instance path instead of the application root

from_pyfile(filename, silent=False)
Updates the values in the config from a Python file
*silent – set to True if you want silent failure for missing files
---------------------------
set FLASK_APP=flaskr
set FLASK_ENV=development
flask run
---------------------------

Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary.

flask.current_app
Points to the application handling the request

flask.g
A namespace object that can store data during an application context.

flask.cli.with_appcontext
Wraps a callback so that it’s guaranteed to be executed with the script’s application context.

class sqlite3.Row
A Row instance serves as a highly optimized row_factory for Connection objects

open_resource(resource, mode='rb')
Opens a resource from the application’s resource folder

app.teardown_appcontext()
tells Flask to call that function when cleaning up after returning the response
teardown_appcontext(f)
Registers a function to be called when the application context ends

app.cli.add_command() adds a new command that can be called with the flask command
add_command(cmd, name=None)
Registers another Command with this group


stop: http://flask.pocoo.org/docs/1.0/tutorial/views/

functools — Higher-order functions and operations on callable objects

werkzeug.security.generate_password_hash
Hash a password with the given method and salt with a string of the given length

werkzeug.security.check_password_hash(pwhash, password)
check a password against a given salted and hashed password value

werkzeug.exceptions.abort(status, *args, **kwargs)
Raises an HTTPException for the given status code or WSGI application

tempfile.mkstemp() creates and opens a temporary file, returning the file object and the path to it.

TESTING tells Flask that the app is in test mode.

The client fixture calls app.test_client() with the application object created by the app fixture.

The runner fixture is similar to client. app.test_cli_runner() creates a runner that can call the Click commands registered with the application.

client.get() makes a GET request and returns the Response object returned by Flask. Similarly, client.post() makes a POST request, converting the data dict into form data.

To test that the page renders successfully, a simple request is made and checked for a 200 OK status_code. If rendering failed, Flask would return a 500 Internal Server Error code.

headers will have a Location header with the login URL when the register view redirects to the login view.

data contains the body of the response as bytes. If you expect a certain value to render on the page, check that it’s in data. Bytes must be compared to bytes. If you want to compare Unicode text, use get_data(as_text=True) instead.

pytest.mark.parametrize tells Pytest to run the same test function with different arguments. You use it here to test different invalid input and error messages without writing the same code three times.

The tests for the login view are very similar to those for register. Rather than testing the data in the database, session should have user_id set after logging in.

Using client in a with block allows accessing context variables such as session after the response is returned. Normally, accessing session outside of a request would raise an error.

Testing logout is the opposite of login. session should not contain user_id after logging out.







